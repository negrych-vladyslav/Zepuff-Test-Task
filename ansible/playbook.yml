- name: Deploy Node.js application via Docker Compose
  hosts: all
  become: yes

  vars_files:
    - vault_secrets.yml
  vars:
    project_path: /opt/zepuff-project
    dev_domain: "dev.zepuff-test-task.pp.ua"
    prod_domain: "prod.zepuff-test-task.pp.ua"
    cert_name: "devops-project"
    docker_group: "docker"

  tasks:
    - name: Install apt-transport-https
      ansible.builtin.apt:
        name:
          - apt-transport-https
          - ca-certificates
          - curl
          - gnupg
          - lsb-release
          - gnupg
        state: latest
        update_cache: true

    - name: Create apt keyrings directory
      ansible.builtin.file:
        path: /etc/apt/keyrings
        state: directory
        mode: "0755"

    - name: Download and store Docker GPG key
      ansible.builtin.shell:
        cmd: |
          curl -fsSL https://download.docker.com/linux/ubuntu/gpg | gpg --dearmor --yes -o /etc/apt/keyrings/docker.gpg
      changed_when: false

    - name: Get DEB architecture
      shell: dpkg --print-architecture
      register: deb_architecture
      changed_when: false

    - name: Add Docker apt repository (using modern signed-by method)
      ansible.builtin.apt_repository:
        repo: "deb [arch={{ deb_architecture.stdout }} signed-by=/etc/apt/keyrings/docker.gpg] https://download.docker.com/linux/ubuntu {{ ansible_distribution_release }} stable"
        state: present
        filename: docker
        update_cache: yes

    - name: Install Docker
      ansible.builtin.apt:
        name:
          - docker-ce
          - docker-ce-cli
          - containerd.io
          - docker-compose
          - docker-compose-plugin
        state: latest
        update_cache: true

    - name: Start and enable service docker
      ansible.builtin.service:
        name: docker
        enabled: yes
        state: started

    - name: Create docker group
      group:
        name: "{{ docker_group }}"
        state: present

    - name: Add user to docker group
      user:
        name: "{{ ansible_user }}"
        group: "{{ docker_group }}"

    - name: Ensure project directories exist
      ansible.builtin.file:
        path: "{{ item }}"
        state: directory
        mode: "0755"
      loop:
        - "{{ project_path }}"
        - "{{ project_path }}/data/certbot/conf"
        - "{{ project_path }}/data/certbot/www"

    - name: Copy project files (synchronize codebase to remote)
      ansible.builtin.synchronize:
        mode: push
        src: "{{ playbook_dir }}/../"
        dest: "{{ project_path }}"

    - name: Create .htpasswd file from Ansible Vault
      ansible.builtin.copy:
        content: "{{ basic_auth_htpasswd_content }}"
        dest: "{{ project_path }}/.htpasswd"
        owner: root
        group: root
        mode: "0644"

    - name: Template unified Nginx config
      ansible.builtin.template:
        src: "templates/nginx.conf.j2"
        dest: "{{ project_path }}/nginx.conf"

    - name: Run Let's Encrypt initialization script
      ansible.builtin.command:
        cmd: ./init-tls.sh
        chdir: "{{ project_path }}"
      changed_when: true

    - name: Define which services to deploy based on the branch
      ansible.builtin.set_fact:
        services_to_deploy: >-
          {% if branch == 'dev' %}
            node-app-dev
          {% else %}
            nginx-reverse-proxy node-app-prod certbot 
          {% endif %}

    - name: Deploy/update specific services without stopping others
      ansible.builtin.command:
        cmd: "docker compose -f docker-compose-prod.yml -f docker-compose-dev.yml up -d --build {{ services_to_deploy }}"
      args:
        chdir: "{{ project_path }}"
      register: deploy_output

    - name: Reload Nginx (guarantee correct certificate is loaded)
      ansible.builtin.command:
        cmd: docker compose exec nginx-reverse-proxy nginx -s reload
      args:
        chdir: "{{ project_path }}"
